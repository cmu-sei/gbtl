RM-RYEGRASS (Debug builds)	original (20 runs)	dot_sparse_dense	eWiseORSparseDenseV1	eWiseORSparseDenseV2	mask_sparse_dense		
Function                      	w.nvals	chksum	min,us	avg,us	max,us	min	avg	max	min	avg	max	min	avg	max	min	avg	max
w := A+.*u                    	3289	5104	287157	294034	322691	3847	4691.95	8343	3911	4760.3	7775	3842	4727.4	7822	2555	2784.9	3350
w := w + A+.*u                	3289	10208	291907	299746	311358	4285	5116.75	8858	4127	4805.55	6951	4111	4797.15	7936	2591	2784.8	3093
w<m,merge> := A+.*u           	3289	9460	293119	313493	365789	5050	6043.35	9203	5138	6158.35	10274	5080	6049.2	9373	644	680.2	826
w<m,replace> := A+.*u         	485	748	338272	345883	353495	4636	5381.15	7130	4538	5434.1	8612	4627	5480.15	8378	637	695.35	900
w<m,merge> := w + A+.*u       	485	1496	333559	390513	470073	4720	5830.6	9432	4747	5680.5	7559	4943	6455	8570	3031	3275.95	3734
w<m,replace> := w + A+.*u     	485	2244	291782	315866	374132	4766	5523.55	8016	4719	5457	8703	4640	5582.9	7230	2997	3228.05	3624
w<!m,merge> := A+.*u          	3289	6600	297061	303265	326453	7428	8257.1	11850	7256	8083.55	11880	7457	8385.15	13595	2555	2727.4	3035
w<!m,replace> := A+.*u        	2804	4356	295250	314133	373686	7287	8238.85	11593	7017	7896.85	11060	7185	8246.6	12649	2446	2635	3132
w<!m,merge> := w + A+.*u      	2804	8712	295008	301850	318237	7896	9394.5	12436	8014	8833.6	12753	7574	8943.35	12169	3067	3283.3	3835
w<!m,replace> := w + A+.*u    	2804	13068	296704	304322	334919	7536	8587.3	12070	7661	8842.95	12228	7623	8454.4	12121	3095	3338.05	3971
w<s(m),merge> := A+.*u        	3289	13816	294903	297501	306530	5122	5987.7	8103	5164	6192.05	8945	5251	6117.55	8621	624	678.55	1145
w<s(m),replace> := A+.*u      	485	748	292710	297509	306443	4797	5531.55	7710	4725	5772.05	9770	4795	5809.35	9473	608	660.35	1001
w<s(m),merge> := w + A+.*u    	485	1496	293793	299452	303959	5092	6001.05	8953	4916	5824.85	10737	4835	5875.7	10054	3029	3312.55	4094
w<s(m),replace> := w + A+.*u  	485	2244	292674	297663	303606	5013	6024.15	8117	5011	5713.1	7325	4916	5992.55	8870	3005	3203.55	3825
w<!s(m),merge> := A+.*u       	3289	6600	295052	300815	307491	7245	8650.75	11867	7147	8184.95	11955	7481	8240.55	11721	2524	2692.05	3127
w<!s(m),replace> := A+.*u     	2804	4356	295802	306156	333930	7291	8168.3	11219	7272	8066	12070	7366	8162.8	12668	2421	2588.95	3012
w<!s(m),merge> := w + A+.*u   	2804	8712	298583	303164	318757	7896	9417.2	15463	7624	8509	11650	8027	8853.75	10823	3060	3245	3795
w<!s(m),replace> := w + A+.*u 	2804	13068	292568	301399	309286	7487	8561.3	12396	7476	8619.7	11561	7599	8535.15	11533	3068	3224.85	3621

RM-RYEGRASS (Release build)
smcmillan@ubuntu ~/github/gbtl/build_sparse_dense (sparse_dense_dot) $ bin/mxv_timing_demo ../src/demo/triangle_count_data_ca-HepTh.tsv 
Read 51946 rows.
#Nodes = 9877
Running algorithm(s)... M.nvals = 1457
u.nvals = 942
OPTIMIZED IMPLEMENTATION: A*u
Function                      	min	avg	max	w.nvals	checksum
w := A+.*u                    	164	182.05	383	3289	5104
w := w + A+.*u                	164	241.05	619	3289	10208
w<m,merge> := A+.*u           	42	46.85	73	3289	9460
w<m,replace> := A+.*u         	45	52.55	156	485	748
w<m,merge> := w + A+.*u       	49	51.2	59	485	1496
w<m,replace> := w + A+.*u     	49	59.3	131	485	2244
w<!m,merge> := A+.*u          	160	181.6	353	3289	6600
w<!m,replace> := A+.*u        	159	211.55	359	2804	4356
w<!m,merge> := w + A+.*u      	172	196.1	325	2804	8712
w<!m,replace> := w + A+.*u    	173	187.75	307	2804	13068
w<s(m),merge> := A+.*u        	41	44.15	58	3289	13816
w<s(m),replace> := A+.*u      	45	50.25	106	485	748
w<s(m),merge> := w + A+.*u    	53	65	202	485	1496
w<s(m),replace> := w + A+.*u  	52	52.85	59	485	2244
w<!s(m),merge> := A+.*u       	159	195.7	321	3289	6600
w<!s(m),replace> := A+.*u     	157	168.35	274	2804	4356
w<!s(m),merge> := w + A+.*u   	173	189.9	310	2804	8712
w<!s(m),replace> := w + A+.*u 	174	197.55	411	2804	13068
OPTIMIZED IMPLEMENTATION: A'*u
w := A'+.*u                   	1009	1146.45	1716	3289	5104
w := w + A'+.*u               	1033	1219.8	2417	3289	10208
w<m,merge> := A'+.*u          	1071	1282.65	1807	3289	9460
w<m,replace> := A'+.*u        	1059	1281.85	2625	485	748
w<m,merge> := w + A'+.*u      	1061	1309.7	1909	485	1496
w<m,replace> := w + A'+.*u    	1057	1171.35	1506	485	2244
w<!m,merge> := A'+.*u         	1290	1900.2	2855	3289	6600
w<!m,replace> := A'+.*u       	1210	1455.6	2300	2804	4356
w<!m,merge> := w + A'+.*u     	1250	1462.3	1931	2804	8712
w<!m,replace> := w + A'+.*u   	1169	1371.7	2054	2804	13068
w<s(m),merge> := A'+.*u       	1106	1242.75	1654	3289	13816
w<s(m),replace> := A+.*u      	1095	1299.6	2065	485	748
w<s(m),merge> := w + A'+.*u   	1087	1182.2	1360	485	1496
w<s(m),replace> := w + A'+.*u 	1083	1219.45	1627	485	2244
w<!s(m),merge> := A'+.*u      	1119	1267.95	1899	3289	6600
w<!s(m),replace> := A'+.*u    	1118	1318.8	2000	2804	4356
w<!s(m),merge> := w + A'+.*u  	1159	1335.7	1768	2804	8712
w<!s(m),replace> := w + A'+.*u	1144	1278.3	2076	2804	13068
Results PASSED

After addressing axpy with Mark and Tze Meng

$ bin/mxv_timing_demo ../src/demo/triangle_count_data_ca-HepTh.tsv 
Read 51946 rows.
#Nodes = 9877
Running algorithm(s)... M.nvals = 1457
u.nvals = 942
OPTIMIZED IMPLEMENTATION: A*u
Function                      	min	avg	max	w.nvals	checksum
w := A+.*u                    	191	279	744	3289	5104
w := w + A+.*u                	212	424.5	2261	3289	10208
w<m,merge> := A+.*u           	65	72.25	111	3289	9460
w<m,replace> := A+.*u         	59	145	1700	485	748
w<m,merge> := w + A+.*u       	75	211.45	813	485	1496
w<m,replace> := w + A+.*u     	68	83.8	135	485	2244
w<!m,merge> := A+.*u          	191	222.5	368	3289	6600
w<!m,replace> := A+.*u        	184	214.45	432	2804	4356
w<!m,merge> := w + A+.*u      	200	236.95	419	2804	8712
w<!m,replace> := w + A+.*u    	224	467.15	2411	2804	13068
w<s(m),merge> := A+.*u        	68	164.5	915	3289	13816
w<s(m),replace> := A+.*u      	62	100.45	762	485	748
w<s(m),merge> := w + A+.*u    	73	79.35	125	485	1496
w<s(m),replace> := w + A+.*u  	72	108.3	455	485	2244
w<!s(m),merge> := A+.*u       	208	252.75	398	3289	6600
w<!s(m),replace> := A+.*u     	206	316.8	1532	2804	4356
w<!s(m),merge> := w + A+.*u   	203	266.65	599	2804	8712
w<!s(m),replace> := w + A+.*u 	220	380.1	1033	2804	13068
OPTIMIZED IMPLEMENTATION: A'*u
w := A'+.*u                   	85	123	453	3289	5104
w := w + A'+.*u               	88	107.05	330	3289	10208
w<m,merge> := A'+.*u          	88	102.7	275	3289	9460
w<m,replace> := A'+.*u        	99	104.45	126	485	748
w<m,merge> := w + A'+.*u      	79	170.15	473	485	1496
w<m,replace> := w + A'+.*u    	85	225.3	1031	485	2244
w<!m,merge> := A'+.*u         	98	118.65	169	3289	6600
w<!m,replace> := A'+.*u       	97	168.45	768	2804	4356
w<!m,merge> := w + A'+.*u     	97	196.55	671	2804	8712
w<!m,replace> := w + A'+.*u   	97	114.25	174	2804	13068
w<s(m),merge> := A'+.*u       	85	106.1	310	3289	13816
w<s(m),replace> := A'+.*u     	99	113.85	165	485	748
w<s(m),merge> := w + A'+.*u   	79	93.8	142	485	1496
w<s(m),replace> := w + A'+.*u 	83	128.2	194	485	2244
w<!s(m),merge> := A'+.*u      	125	193.25	640	3289	6600
w<!s(m),replace> := A'+.*u    	104	120.75	243	2804	4356
w<!s(m),merge> := w + A'+.*u  	99	116.05	334	2804	8712
w<!s(m),replace> := w + A'+.*u	98	116.3	304	2804	13068
Results PASSED

